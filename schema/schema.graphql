type 	Actor {
  type: String!
  data: String!
} 

input	ActorCreateInput {
  type: String!
  data: String!
} 

input EventCreateInput {
  transaction: String!
  actors: [ActorCreateInput!]!
  type: String!
  errors: [String!]
  outputs: [String!]
  tags: [String!]
  source: String
}

input EventWhereInput {
  transaction: String
  actorTypes: [String!]
  tags: [String]
  timestamp_gt: Int
  timestamp_lt: Int
}

input EventPaginationInput {
  page: Int
  size: Int
}

type Event {
  id: ID!
  transaction: String!
  actors: [Actor!]!
  timestamp: Int!
  type: String!
  errors: [String!]
  outputs: [String!]
  tags: [String!]
  source: String
}

type Query {
  events(streamName: String!, pagination: EventPaginationInput): [Event!]!
}

type Mutation {
  postEvent(event: EventCreateInput!): Boolean!
}